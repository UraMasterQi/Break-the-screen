import tkinter as tk
from random import randint, choice

class BreakingWindow:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Разбивающееся окно")
        
        # Создаем холст
        self.canvas = tk.Canvas(self.root, width=400, height=400, bg='black')
        self.canvas.pack(expand=True, fill='both')
        
        # Создаем контейнер для кнопок, расположенный по центру
        self.button_container = tk.Frame(self.root, bg='black')
        self.button_container.place(relx=0.5, rely=0.5, anchor='center')
        
        # Создаем кнопки
        self.break_button = tk.Button(self.button_container, text="Разбить!", 
                                    command=self.break_screen, width=10)
        self.break_button.pack(pady=5)
        
        self.clear_button = tk.Button(self.button_container, text="Очистить!", 
                                    command=self.start_clear_animation, width=10)
        self.clear_button.pack(pady=5)
        
        # Переменная для анимации
        self.animation_speed = 5
        self.is_animating = False
        
    def break_screen(self):
        # Получаем размеры холста
        width = self.canvas.winfo_width()
        height = self.canvas.winfo_height()
        
        # Создаем 10 случайных фигур
        for _ in range(10):
            x = randint(0, width-20)
            y = randint(0, height-20)
            size = randint(5, 15)
            
            if choice(['circle', 'square']) == 'circle':
                self.canvas.create_oval(x, y, x+size, y+size, fill='white', outline='white')
            else:
                self.canvas.create_rectangle(x, y, x+size, y+size, fill='white', outline='white')

    def start_clear_animation(self):
        if not self.is_animating:
            self.is_animating = True
            self.clear_button.config(state='disabled')
            self.break_button.config(state='disabled')
            self.current_y = 0
            self.animate_clear()

    def animate_clear(self):
        if self.current_y <= self.canvas.winfo_height():
            # Создаем волну очистки
            wave = self.canvas.create_rectangle(
                0, self.current_y,
                self.canvas.winfo_width(), self.current_y + 20,
                fill='blue', outline='cyan'
            )
            
            # Удаляем все объекты, которые пересекаются с волной
            overlapping = self.canvas.find_overlapping(
                0, self.current_y,
                self.canvas.winfo_width(), self.current_y + 20
            )
            
            for item in overlapping:
                if item != wave:
                    self.canvas.delete(item)
            
            self.current_y += self.animation_speed
            self.canvas.after(20, self.animate_clear)
            self.canvas.delete(wave)
        else:
            # Очищаем холст после завершения анимации
            self.canvas.delete('all')
            self.is_animating = False
            self.clear_button.config(state='normal')
            self.break_button.config(state='normal')
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = BreakingWindow()
    app.run()
